<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="_test_automatisation_8cs" kind="file">
    <compoundname>TestAutomatisation.cs</compoundname>
    <innerclass refid="class_code_wars_1_1_tests_1_1_kata_tests" prot="public">CodeWars::Tests::KataTests</innerclass>
    <innernamespace refid="namespace_code_wars_1_1_tests">CodeWars::Tests</innernamespace>
    <innernamespace refid="namespace_system_1_1_collections">System::Collections</innernamespace>
    <innernamespace refid="namespace_system_1_1_diagnostics">System::Diagnostics</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Collections;</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Collections.Generic;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Diagnostics;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Microsoft.VisualStudio.TestTools.UnitTesting;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">CodeWars.Tests<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">partial<sp/>class<sp/></highlight><highlight class="normal">KataTests<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>delegate<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertDlg&lt;T&gt;(T<sp/>a,<sp/>T<sp/>b)<sp/>where<sp/>T<sp/>:<sp/>ICollection;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="class_code_wars_1_1_tests_1_1_kata_tests_1a0514840849682c696cf83ccd9deed7f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestOneTypeArgs&lt;Tout,<sp/>Tin&gt;(IDictionary&lt;Tin,<sp/>Tout&gt;<sp/>dic,<sp/>Func&lt;Tin,<sp/>Tout&gt;<sp/>dlg)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ParseDictonary(dic,<sp/>dlg);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal">(var<sp/>item<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>dic)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tout<sp/>returned<sp/>=<sp/>dlg.Invoke(item.Key);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertCheck(item.Key,<sp/>item.Value,<sp/>returned);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//void<sp/>TestOneTypeArgs&lt;Tout,<sp/>Tin&gt;(IDictionary&lt;Tin,<sp/>ICollection&gt;<sp/>dic,<sp/>OneArgDlg&lt;ICollection,<sp/>Tin&gt;<sp/>dlg)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>foreach(var<sp/>item<sp/>in<sp/>dic)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>ICollection<sp/>returned<sp/>=<sp/>dlg.Invoke(item.Key);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>AssertCheck(item.Key,<sp/>item.Value,<sp/>returned);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="class_code_wars_1_1_tests_1_1_kata_tests_1af291ddbd6045d5e0eabbba36651fff01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ParseDictonary&lt;TKey,<sp/>TValue&gt;(IDictionary&lt;TKey,<sp/>TValue&gt;<sp/>dictionary,<sp/>Func&lt;TKey,<sp/>TValue&gt;<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal">(var<sp/>item<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>dictionary)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TValue<sp/>returned<sp/>=<sp/>func.Invoke(item.Key);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertCheck(item.Key,<sp/>item.Value,<sp/>returned);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="class_code_wars_1_1_tests_1_1_kata_tests_1a9c2c214761d53c71e0cdbcfa53c8236f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertCheck&lt;Tout,<sp/>Tin&gt;(Tin<sp/>input,<sp/>Tout<sp/>expected,<sp/>Tout<sp/>returned)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>message<sp/>=<sp/>ErrorMessage(input,<sp/>expected,<sp/>returned);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{<sp/>AssertCall(expected,<sp/>returned);<sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(AssertFailedException)<sp/>{<sp/>AssertCatch(message);<sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="class_code_wars_1_1_tests_1_1_kata_tests_1ab2d4692efe210999b3cc4c8fa14baef3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertCall&lt;T&gt;(T<sp/>expected,<sp/>T<sp/>actual)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ICollection<sp/>colExp<sp/>=<sp/>(ICollection)expected;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ICollection<sp/>colAct<sp/>=<sp/>(ICollection)actual;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(typeof(T)<sp/>is<sp/>ICollection)<sp/>CollectionAssert.AreEqual(colExp,<sp/>colAct);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>Assert.AreEqual(expected,<sp/>actual);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="class_code_wars_1_1_tests_1_1_kata_tests_1af96bf5ff929eb142ed828a07c032a445" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_code_wars_1_1_tests_1_1_kata_tests_1af96bf5ff929eb142ed828a07c032a445" kindref="member">AssertCatch</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ConsoleTraceListener<sp/>traceListener<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ConsoleTraceListener();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>traceListener.WriteLine(message);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>AssertFailedException(message);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="class_code_wars_1_1_tests_1_1_kata_tests_1a71d774c01dd13a481e40342fdf72a264" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>ErrorMessage&lt;Tout,<sp/>Tin&gt;(Tin<sp/>input,<sp/>Tout<sp/>expected,<sp/>Tout<sp/>returned)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">$</highlight><highlight class="stringliteral">@&quot;</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral">Input:<sp/></highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral">{GetString(input)}<sp/></highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral">Expected:<sp/></highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral">{GetString(expected)}<sp/></highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral">Returned:<sp/></highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral">{GetString(returned)}</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral">&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="class_code_wars_1_1_tests_1_1_kata_tests_1a5f974936537a54d693e54473bd0b6bc8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>GetString&lt;T&gt;(T<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(typeof(T)<sp/>is<sp/>IEnumerable)<sp/>?<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.Join(Environment.NewLine,<sp/>a)<sp/>:<sp/>a.ToString();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="D:/Development/Visual Studio 2017/Projects/CodeWars/UnitTestProject1/TestAutomatisation.cs"/>
  </compounddef>
</doxygen>
