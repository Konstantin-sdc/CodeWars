namespace CodeWars.Kata.Kyu.L4
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    internal static class PaintFuck
    {
        #region Rules
        //Допустимые команды в Paintfuck включают в себя:
        //n - Переместить указатель данных на север(вверх)
        //e - Переместить указатель данных на восток(вправо)
        //s - Переместить указатель данных на юг(вниз)
        //w - Переместить указатель данных на запад(влево)
        //* - Отразить бит в текущей ячейке(так же, как в Smallfuck)
        //[- Пропускать совпадение,] если бит под текущим указателем равен 0(так же, как в Smallfuck)
        //]- Перейти к соответствию[(если бит под текущим указателем ненулевой) (так же, как в Smallfuck)

        // Остальные символы игнорируются

        // Символы команд регистрозависимы.
        // Интерпретатор должен инициализировать все ячейки в сетке данных значением независимо от ширины и высоты сетки. 
        // указатель всегда должен начинаться в верхнем левом углу сетки данных (т. Е. Первая строка, первый столбец).
        // 
        // Одна итерация определяется как один шаг в программе, то есть количество оцениваемых символов команды. 
        // Например, учитывая программу nessewnnnewwwsswse и количество итераций 5, 
        // ваш интерпретатор должен оценить, nesse прежде чем возвращать конечное состояние таблицы данных. 
        // Некомандные символы не должны учитываться при подсчете количества итераций.
        // 
        // переход к совпадению ] при [ обнаружении (или наоборот) считается одной итерацией, 
        // независимо от количества символов команды между ними. 
        // Следующая итерация начинается с команды сразу после сопоставления ] или [.
        //
        // Интерпретатор должен нормально завершать работу и возвращать конечное состояние сетки данных 2D всякий раз, 
        // когда любое из упомянутых условий становится истинным: 
        // (1) все команды были рассмотрены слева направо, или 
        // (2) ваш интерпретатор уже выполнил указанное число итераций во втором аргументе.
        // Возвращаемое значение вашего интерпретатора должно быть представлением конечного состояния сетки данных 2D, где каждая строка отделена от следующей с помощью CRLF ( \r\n). Например, если конечное состояние вашей таблицы данных
        // [
        //   [1, 0, 0],
        //   [0, 1, 0],
        //   [0, 0, 1]
        // ]
        // ... тогда ваша возвращаемая строка должна быть "100\r\n010\r\n001".
        #endregion

        /// <summary>
        /// 
        /// </summary>
        /// <param name="code">
        /// <para>Код Paintfuck, который нужно выполнить.</para>
        /// <para>Комментарии (не командные символы), игнорируются.</para>
        /// </param>
        /// <param name="iterations">
        /// Неотрицательное целое число, == количество итераций перед возвращением конечного состояния сетки данных.
        /// </param>
        /// <param name="width">Положительное целое число = количество столбцов в сетке данных.</param>
        /// <param name="height">Положительное целое число = количество строк в сетке данных.</param>
        /// <returns>
        /// <para>Начальное состояние сетки данных, если <paramref name="code"/> пуст.</para>
        /// <para>Начальное состояние сетки данных, если <paramref name="iterations"/> == 0.</para>
        /// </returns>
        public static string Interpret(string code, int iterations, int width, int height)
        {
            if (true)
            {

            }
            return "123";
            // Implement your interpreter here
        }

    }
}
